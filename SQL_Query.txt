
-- 1.1 Data type of all columns in the "customers" table.

SELECT
      column_name,
      data_type
FROM 
      `retail-sales-1618.retail_sales.INFORMATION_SCHEMA.COLUMNS`
WHERE 
      table_name = 'customers';

-- 1.2 Get the time range between which the orders were placed.

SELECT 
      min(order_purchase_timestamp) AS first_order,
      max(order_purchase_timestamp) AS last_order
FROM 
      `retail_sales.orders`;


-- 1.3 Count the Cities & States of customers who ordered during the given period.

SELECT
      COUNT(DISTINCT customer_city) as num_of_cities,
      COUNT( DISTINCT customer_state) as num_of_states
FROM 
      `retail_sales.customers`;


-- 2.1 Is there a growing trend in the no. of orders placed over the past years?

SELECT
      EXTRACT(year from order_purchase_timestamp) as year,
      EXTRACT(month from order_purchase_timestamp) as month,
      COUNT(*) as order_count
FROM 
      `retail_sales.orders`
GROUP BY 
      year, month
ORDER BY 
      year, month;



-- 2.2 During what time of the day, do the customers mostly place their orders? (Dawn, Morning, Afternoon or Night)
-- (0-6) hrs : Dawn
-- (7-12) hrs : Mornings
-- (13-18) hrs : Afternoon
-- (19-23) hrs : Night

SELECT 
      CASE
          WHEN 
              extract(hour from order_purchase_timestamp) between 0 and 6 
          THEN 
              'Dawn'
          WHEN 
              extract(hour from order_purchase_timestamp) between 7 and 12 
          THEN 
              'Mornings'
          WHEN 
              extract(hour from order_purchase_timestamp) between 13 and 18 
          THEN 
              'Afternoon'
          WHEN
              extract(hour from order_purchase_timestamp) between 19 and 23 
          THEN 
              'Night'
          END 
      AS Time_of_day,
      COUNT(*) order_count
FROM 
      `retail_sales.orders`
GROUP BY 
      Time_of_day
ORDER BY 
      order_count DESC;

-- 3.1. Get the month on month no. of orders placed in each state.

SELECT 
      EXTRACT(YEAR from o.order_purchase_timestamp) AS year,
      EXTRACT(MONTH from o.order_purchase_timestamp) AS month,
      c.customer_state,
      COUNT(*) as num_of_orders
FROM 
      `retail_sales.orders` AS o
INNER JOIN 
      `retail_sales.customers` AS c
ON 
      o.customer_id = c.customer_id
GROUP BY
      year, month, c.customer_state
ORDER BY
      num_of_orders DESC;



-- 3.2. How are the customers distributed across all the states?

SELECT 
      customer_state,
      COUNT(DISTINCT customer_unique_id) as num_of_customers
FROM 
      `retail_sales.customers` 
GROUP BY 
      customer_state
ORDER BY 
      num_of_customers DESC;

-- Impact on economy
-- 4.1 Get the % increase in the cost of orders from year 2017 to 2018 (include months between Jan to Aug only).

with cte as (
    SELECT
          EXTRACT(YEAR FROM order_purchase_timestamp) AS year,
          EXTRACT(MONTH FROM order_purchase_timestamp) AS month,
          SUM(price) / COUNT(o.order_id) AS price_per_order,
          SUM(freight_value) / COUNT(o.order_id) AS freight_per_order
    FROM 
        `retail_sales.orders` AS o
    INNER JOIN 
        `retail_sales.order_items` AS i
    ON 
        o.order_id = i.order_id
    WHERE 
        EXTRACT(YEAR FROM order_purchase_timestamp) BETWEEN 2017 AND 2018
    AND 
        EXTRACT(MONTH FROM order_purchase_timestamp) BETWEEN 1 AND 8
    GROUP BY 
        year,month
      )
SELECT 
      year, 
      SUM(price_per_order + freight_per_order) as total_cost
FROM 
      cte
GROUP BY 
      year


-- percentage increase in number of orders from 2017 to 2018 (between months January and August)

with base as (
        SELECT
              EXTRACT(YEAR FROM order_purchase_timestamp) AS year,
              COUNT(DISTINCT o.order_id) AS orders,
              COUNT(DISTINCT c.customer_id) AS customers
        FROM `retail_sales.orders` AS o
        LEFT JOIN `retail_sales.customers` AS c
        ON o.customer_id = c.customer_id
        WHERE EXTRACT(MONTH FROM order_purchase_timestamp) BETWEEN 1 AND 8
        GROUP BY year
            )
, base2 AS (
        SELECT 
              *,
              LAG(orders,1) OVER (ORDER BY year ASC) as prev_year_orders
        FROM 
            base
            )
SELECT *,
      ROUND((orders - COALESCE(prev_year_orders,0)) / COALESCE(orders,1) * 100,2) AS percent_increase
FROM 
      base2


-- Get the % increase in the cost of orders from year 2017 to 2018 (include months between Jan to Aug only).


with base as (
        SELECT
              EXTRACT(YEAR FROM order_purchase_timestamp) AS year,
              SUM(payment_value) AS cost
        FROM 
            `retail_sales.orders` AS o
        JOIN 
            `retail_sales.payments` AS p
        ON 
            o.order_id = p.order_id
        WHERE 
            EXTRACT(MONTH FROM order_purchase_timestamp) BETWEEN 1 AND 8
        GROUP BY 
            year
            )
, base2 AS (
        SELECT *,
              LAG(cost,1) OVER (ORDER BY year ASC) as prev_year_cost
        FROM 
            base
            )
SELECT *,
      ROUND((cost - COALESCE(prev_year_cost,0)) / COALESCE(cost,1) * 100,2) AS percent_increase
FROM 
      base2
ORDER BY 
      year ASC




-- 4.2 Mean & Sum of price and freight value by customer state

WITH base AS (
      SELECT 
            c.customer_state,
            i.price,
            i.freight_value
      FROM 
            `retail_sales.customers` AS c
      JOIN 
            `retail_sales.orders` AS o 
      ON 
            c.customer_id = o.customer_id
      JOIN 
            `retail_sales.order_items` AS i
      ON 
            o.order_id = i.order_id
            )
SELECT
      customer_state,
      SUM(price) AS total_price_per_state,
      AVG(price) AS avg_price_per_state,
      SUM(freight_value) AS total_freight_per_state,
      AVG(freight_value) AS avg_freight_per_state
FROM 
      base
GROUP BY 
      customer_state
ORDER BY 
      total_price_per_state DESC



-- 5 Analysis based on sales, freight and delivery time.
-- 5.1 Find the no. of days taken to deliver each order from the orderâ€™s purchase date as delivery time.
-- Also, calculate the difference (in days) between the estimated & actual delivery date of an order.



SELECT 
      order_id,
      order_purchase_timestamp,
      order_estimated_delivery_date,
      order_delivered_customer_date,
      DATE_DIFF(order_delivered_customer_date,order_purchase_timestamp,DAY) AS time_to_deliver,
      DATE_DIFF(order_estimated_delivery_date, order_delivered_customer_date, DAY) AS diff_estimated_delivery
FROM 
      `retail_sales.orders`
WHERE 
      order_status = 'delivered' 
AND 
      order_delivered_customer_date IS NOT NULL
ORDER BY 
      diff_estimated_delivery ASC



-- 5.2 Find out the top 5 states with the highest & lowest average freight value.


WITH base AS (
      SELECT 
            c.customer_state,
            i.price,
            i.freight_value
      FROM 
            `retail_sales.customers` AS c
      JOIN 
            `retail_sales.orders` AS o 
      ON 
            c.customer_id = o.customer_id
      JOIN 
            `retail_sales.order_items` AS i
      ON 
            o.order_id = i.order_id
            )
SELECT
      customer_state,
      AVG(freight_value) AS avg_freight_per_state
FROM 
      base
GROUP BY 
      customer_state
ORDER by 
      avg_freight_per_state ASC
LIMIT 5

-- 6 Analysis based on payments
-- 6.1 Find the month on month no. of orders placed using different payment types.

SELECT DISTINCT payment_type
FROM `retail_sales.payments`

SELECT 
      p.payment_type,
      COUNT(o.order_id) as orders_count,
      EXTRACT(MONTH FROM o.order_purchase_timestamp) AS month,
      EXTRACT(YEAR FROM o.order_purchase_timestamp) AS year
FROM 
      `retail_sales.payments` AS p
INNER JOIN 
      `retail_sales.orders` AS o
ON 
      p.order_id = o.order_id
GROUP BY 
      year, month, payment_type
ORDER BY 
      year, month


-- 6.2 Find the no. of orders placed on the basis of the payment installments that have been paid.

SELECT 
      payment_installments,
      COUNT(DISTINCT order_id) AS count_orders
FROM 
      `retail_sales.payments`
WHERE 
      payment_installments > 1
GROUP BY 
      payment_installments


